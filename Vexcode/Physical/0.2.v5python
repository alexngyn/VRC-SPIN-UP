{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\nmotor_1 = Motor(Ports.PORT19, GearSetting.RATIO_18_1, False)\nmotor_2 = Motor(Ports.PORT12, GearSetting.RATIO_18_1, True)\nmotor_3 = Motor(Ports.PORT11, GearSetting.RATIO_18_1, False)\nmotor_4 = Motor(Ports.PORT20, GearSetting.RATIO_18_1, True)\nmotor_5 = Motor(Ports.PORT1, GearSetting.RATIO_18_1, False)\ncontroller_1 = Controller(PRIMARY)\ngyro_a = Gyro(brain.three_wire_port.a)\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n#endregion VEXcode Generated Robot Configuration\n\n# ------------------------------------------\n# \n# \tProject:      VEXcode Project\n#\tAuthor:       VEX\n#\tCreated:\n#\tDescription:  VEXcode V5 Python Project\n# \n# ------------------------------------------\n\n# Library imports\nfrom vex import *\n\nmotor_1.set_velocity(0, PERCENT)\nmotor_2.set_velocity(0, PERCENT)\nmotor_3.set_velocity(0, PERCENT)\nmotor_4.set_velocity(0, PERCENT)\nmotor_5.set_velocity(0, PERCENT)\nmotor_1.spin(FORWARD)\nmotor_2.spin(FORWARD)\nmotor_3.spin(FORWARD)\nmotor_4.spin(FORWARD)\nmotor_5.spin(FORWARD)\ns = 100\nl=[\"\",\"\",\"\"]\ndt=0\npa = gyro_a.heading(DEGREES)\ndef readGyro():\n    gyro = 0\n    for i in range(100):\n        gyro += gyro_a.heading(DEGREES)\n    return gyro/100\ndef calibrateGyro():\n    if controller_1.buttonA.pressing():\n        gyro_a.calibrate()\n        gyro_a.set_heading(0, DEGREES)\n        pa = 0\ndef gyroDrift():\n    global dt, pa\n    if dt != 1000:\n        dt += 5\n    else:\n        if abs(pa - gyro_a.heading(DEGREES)) < 0.1 or abs(pa - gyro_a.heading(DEGREES)) > 359:\n            gyro_a.set_heading(pa, DEGREES)\n        else: pa = gyro_a.heading(DEGREES)\ndef move():\n    if controller_1.axis2.position() < 0: s2 = -100*(1/(math.exp(-12.5*((abs(controller_1.axis2.position()/100)-0.5))+1)))\n    if controller_1.axis2.position() > 0: s2 = 100*(1/(math.exp(-12.5*(((controller_1.axis2.position())/100)-0.5))+1))\n    if controller_1.axis2.position() == 0: s2 = 0\n    if controller_1.axis4.position() < 0: s4 = -100*(1/(math.exp(-12.5*((abs(controller_1.axis4.position()/100)-0.5))+1)))\n    if controller_1.axis4.position() > 0: s4 = 100*(1/(math.exp(-12.5*(((controller_1.axis4.position())/100)-0.5))+1))\n    if controller_1.axis4.position() == 0: s4 = 0\n    motor_1.set_velocity(s2, PERCENT)\n    motor_2.set_velocity(s2, PERCENT)\n    motor_3.set_velocity(s2, PERCENT)\n    motor_4.set_velocity(s2, PERCENT)\n    motor_5.set_velocity(s4, PERCENT)\ndef rotate():\n    if controller_1.buttonR2.pressing(): \n        motor_1.set_velocity(s, PERCENT)\n        motor_4.set_velocity(-s, PERCENT)\n        while controller_1.buttonR2.pressing(): wait(1, MSEC)\n    if controller_1.buttonL2.pressing():\n        motor_2.set_velocity(s, PERCENT)\n        motor_3.set_velocity(-s, PERCENT)\n        while controller_1.buttonR2.pressing(): wait(1, MSEC)\n    if controller_1.buttonR1.pressing():\n        g = readGyro()\n        d = 90 - (360 - g) if g >= 270 else g + 90\n        while not abs(d - g) < 5:\n            g = readGyro()\n            sp = abs(d - gyro_a.heading(DEGREES))\n            motor_1.set_velocity(sp, PERCENT)\n            motor_4.set_velocity(-sp, PERCENT)\n    if controller_1.buttonL1.pressing():\n        g = readGyro()\n        d = 360 - (90 - g) if g < 90 else g - 90\n        while not abs(d - g) < 5:\n            g = readGyro()\n            sp = abs(d - gyro_a.heading(DEGREES))\n            motor_2.set_velocity(sp, PERCENT)\n            motor_3.set_velocity(-sp, PERCENT)\n    \ndef write():\n    l[2] = l[1]\n    l[1] = l[0]\n    l[0] = \"Heading \"+ str(gyro_a.heading(DEGREES))  \n    controller_1.screen.clear_screen()\n    for i in range(len(l)):\n        controller_1.screen.set_cursor(i+1, 1)\n        controller_1.screen.print(l[i])\nwhile True:\n    calibrateGyro()\n    gyroDrift()\n    move()\n    rotate()\n    write()\n    wait(5, MSEC)","textLanguage":"python","rconfig":[{"port":[19],"name":"motor_1","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[12],"name":"motor_2","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[11],"name":"motor_3","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[20],"name":"motor_4","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[1],"name":"motor_5","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[],"name":"controller_1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"none","id":"primary"},"triportSourcePort":22},{"port":[1],"name":"gyro_a","customName":false,"deviceType":"Gyro","deviceClass":"gyro","setting":{"id":"partner"},"triportSourcePort":22}],"slot":0,"platform":"V5","sdkVersion":"20220726.10.00.00","appVersion":"2.4.0","minVersion":"2.4.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"First","target":"Physical"}