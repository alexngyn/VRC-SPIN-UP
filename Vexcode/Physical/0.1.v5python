{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\ncontroller_1 = Controller(PRIMARY)\nleft_motor_a = Motor(Ports.PORT11, GearSetting.RATIO_18_1, False)\nleft_motor_b = Motor(Ports.PORT10, GearSetting.RATIO_18_1, False)\nleft_drive_smart = MotorGroup(left_motor_a, left_motor_b)\nright_motor_a = Motor(Ports.PORT1, GearSetting.RATIO_18_1, True)\nright_motor_b = Motor(Ports.PORT20, GearSetting.RATIO_18_1, True)\nright_drive_smart = MotorGroup(right_motor_a, right_motor_b)\ndrivetrain = DriveTrain(left_drive_smart, right_drive_smart, 319.19, 295, 40, MM, 1)\nmotor_12 = Motor(Ports.PORT12, GearSetting.RATIO_18_1, False)\ngyro_a = Gyro(brain.three_wire_port.a)\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n#endregion VEXcode Generated Robot Configuration\n\n# ------------------------------------------\n# \n# \tProject:      VEXcode Project\n#\tAuthor:       VEX\n#\tCreated:\n#\tDescription:  VEXcode V5 Python Project\n# \n# ------------------------------------------\n\n# Library imports\nfrom vex import *\n\n# Begin project code\nAutoSpin = False\ndrivetrain.set_turn_velocity(100, PERCENT)\ndrivetrain.set_drive_velocity(0, PERCENT)\nmotor_12.set_velocity(0, PERCENT)\ndrivetrain.drive(FORWARD)\nmotor_12.spin(FORWARD)\nscurve = lambda cp: 0 if(cp == 0) else 1/(math.exp(-12.5*(cp-0.5))+1)\nwhile True:\n    brain.screen.print(gyro_a.heading(DEGREES))\n    if controller_1.buttonA.pressing():\n        gyro_a.set_heading(0, DEGREES)\n    if controller_1.buttonR1.pressing(): \n        if AutoSpin: temp = True\n        if AutoSpin: Autospin = False\n        drivetrain.turn(RIGHT)\n        while controller_1.buttonR1.pressing(): pass\n        drivetrain.stop()\n        if temp: AutoSpin = True\n    if controller_1.buttonL1.pressing():\n        if Autospin: temp = True\n        if Autospin: AutoSpin = False\n        drivetrain.turn(LEFT)\n        while controller_1.buttonL1.pressing(): pass\n        drivetrain.stop()\n        if temp: AutoSpin = True\n    if controller_1.buttonR2.pressing():\n        if 45 > 90 - gyro_a.heading(DEGREES):\n            drivetrain.turn_for(RIGHT, abs(90 - gyro_a.heading(DEGREES)), DEGREES, wait=True)\n        elif 45 > 180 - gyro_a.heading(DEGREES):\n            drivetrain.turn_for(RIGHT, abs(180 - gyro_a.heading(DEGREES)), DEGREES, wait=True)\n        elif 45 > 270 - gyro_a.heading(DEGREES):\n            drivetrain.turn_for(RIGHT, abs(270 - gyro_a.heading(DEGREES)), DEGREES, wait=True)\n        elif 45 > gyro_a.heading(DEGREES):\n            drivetrain.turn_for(RIGHT, gyro_a.heading(DEGREES), DEGREES, wait=True)\n        else:\n            pass\n    if controller_1.buttonL2.pressing():\n        if 45 > -1 * (90 - gyro_a.heading(DEGREES)):\n            drivetrain.turn_for(LEFT, abs(90 - gyro_a.heading(DEGREES)), DEGREES, wait=True)\n        elif 45 > -1 * (180 - gyro_a.heading(DEGREES)):\n            drivetrain.turn_for(LEFT, abs(180 - gyro_a.heading(DEGREES)), DEGREES, wait=True)\n        elif 45 > -1 * (270 - gyro_a.heading(DEGREES)):\n            drivetrain.turn_for(LEFT, abs(270 - gyro_a.heading(DEGREES)), DEGREES, wait=True)\n        elif 45 > 360 - gyro_a.heading(DEGREES):\n            drivetrain.turn_for(LEFT, 360 - gyro_a.heading(DEGREES), DEGREES, wait=True)\n        else:\n            pass\n    if controller_1.buttonX.pressing(): AutoSpin = not AutoSpin\n    drivetrain.set_drive_velocity(scurve(controller_1.axis2.position()), PERCENT)\n    motor_12.set_velocity(scurve(controller_1.axis4.position()), PERCENT)\n    if AutoSpin:\n        if 45 > -1 * (90 - gyro_a.heading(DEGREES)):\n            drivetrain.turn_for(LEFT, abs(90 - gyro_a.heading(DEGREES)), DEGREES, wait=True)\n        elif 45 > 90 - gyro_a.heading(DEGREES):\n            drivetrain.turn_for(RIGHT, abs(90 - gyro_a.heading(DEGREES)), DEGREES, wait=True)\n        elif 45 > -1 * (180 - gyro_a.heading(DEGREES)):\n            drivetrain.turn_for(LEFT, abs(180 - gyro_a.heading(DEGREES)), DEGREES, wait=True)\n        elif 45 > 180 - gyro_a.heading(DEGREES):\n            drivetrain.turn_for(RIGHT, abs(180 - gyro_a.heading(DEGREES)), DEGREES, wait=True)\n        elif 45 > -1 * (270 - gyro_a.heading(DEGREES)):\n            drivetrain.turn_for(LEFT, abs(270 - gyro_a.heading(DEGREES)), DEGREES, wait=True)\n        elif 45 > 270 - gyro_a.heading(DEGREES):\n            drivetrain.turn_for(RIGHT, abs(270 - gyro_a.heading(DEGREES)), DEGREES, wait=True)\n        elif 45 > 360 - gyro_a.heading(DEGREES):\n            drivetrain.turn_for(LEFT, 360 - gyro_a.heading(DEGREES), DEGREES, wait=True)\n        elif 45 > gyro_a.heading(DEGREES):\n            drivetrain.turn_for(RIGHT, gyro_a.heading(DEGREES), DEGREES, wait=True)\n        else:\n            pass","textLanguage":"python","rconfig":[{"port":[],"name":"controller_1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"none","id":"primary"}},{"port":[11,10,1,20,null],"name":"drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"4-motor","wheelSize":"wheel4in","gear":"ratio18_1","gearRatio":"1:1","direction":"fwd","gyroType":"none","width":"295","unit":"mm","wheelbase":"40","wheelbaseUnit":"mm","xOffset":"0","xOffsetUnit":"mm","yOffset":"0","yOffsetUnit":"mm","thetaOffset":"180","id":"partner"}},{"port":[12],"name":"motor_12","customName":false,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"}},{"port":[1],"name":"gyro_a","customName":false,"deviceType":"Gyro","deviceClass":"gyro","setting":{"id":"partner"},"triportSourcePort":22}],"slot":0,"platform":"V5","sdkVersion":"20220726.10.00.00","appVersion":"2.4.0","minVersion":"2.4.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"First","target":"Physical"}